// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  OWNER
  STAFF
  ADMIN
}

enum ShopRole {
  OWNER
  STAFF
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
  BOTH
}

enum OrderStatus {
  RECEIVED
  PREPARING
  OUT_FOR_DELIVERY
  READY_FOR_PICKUP
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

// Local user profile (we'll link to Supabase auth on the app side)
model Profile {
  id        String      @id @default(uuid()) @db.Uuid
  email     String?     @unique
  name      String?
  phone     String?
  role      Role        @default(CUSTOMER)
  shops     Shop[]      @relation("OwnerShops")
  memberships ShopMember[]
  orders    Order[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// A vendorâ€™s store
model Shop {
  id               String        @id @default(uuid()) @db.Uuid
  ownerId          String        @db.Uuid
  owner            Profile       @relation("OwnerShops", fields: [ownerId], references: [id])
  name             String
  slug             String        @unique
  description      String?
  phone            String?
  address1         String
  address2         String?
  city             String
  postalCode       String
  isActive         Boolean       @default(false)
  deliveryMethod   DeliveryMethod @default(BOTH)
  deliveryFeeCents Int           @default(0) // e.g., 499 = $4.99
  commissionBps    Int?          // basis points, e.g., 1000 = 10%

  products         Product[]
  members          ShopMember[]
  orders           Order[]

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

// Additional staff for a shop
model ShopMember {
  id        String   @id @default(uuid()) @db.Uuid
  shopId    String   @db.Uuid
  userId    String   @db.Uuid
  role      ShopRole @default(STAFF)

  shop      Shop     @relation(fields: [shopId], references: [id])
  user      Profile  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([shopId])
  @@index([userId])
  @@unique([shopId, userId])
}

// Product catalog
model Product {
  id          String   @id @default(uuid()) @db.Uuid
  shopId      String   @db.Uuid
  name        String
  slug        String
  description String?
  priceCents  Int      @default(0)
  currency    String   @default("CAD")
  sku         String?
  stockQty    Int      @default(0)
  imageUrls   String[] @default([]) // text[] in Postgres
  isActive    Boolean  @default(true)

  shop        Shop     @relation(fields: [shopId], references: [id])
  variants    ProductVariant[]
  orderItems  OrderItem[]
  cartItems   CartItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([shopId])
  @@unique([shopId, slug]) // unique per shop
}

model ProductVariant {
  id             String  @id @default(uuid()) @db.Uuid
  productId      String  @db.Uuid
  name           String
  priceDiffCents Int     @default(0)
  sku            String?
  stockQty       Int     @default(0)

  product        Product @relation(fields: [productId], references: [id])
  orderItems     OrderItem[]
  cartItems      CartItem[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([productId])
}

// Shopping cart (per customer)
model Cart {
  id         String      @id @default(uuid()) @db.Uuid
  customerId String      @db.Uuid
  items      CartItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([customerId])
}

model CartItem {
  id             String         @id @default(uuid()) @db.Uuid
  cartId         String         @db.Uuid
  productId      String         @db.Uuid
  variantId      String?        @db.Uuid
  qty            Int            @default(1)
  unitPriceCents Int

  cart           Cart           @relation(fields: [cartId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
  variant        ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

// Orders & payments
model Order {
  id               String        @id @default(uuid()) @db.Uuid
  shopId           String        @db.Uuid
  customerId       String        @db.Uuid
  status           OrderStatus   @default(RECEIVED)
  subtotalCents    Int
  taxCents         Int           @default(0)
  deliveryFeeCents Int           @default(0)
  totalCents       Int
  currency         String        @default("CAD")
  deliveryMethod   DeliveryMethod @default(PICKUP)

  address1         String?
  address2         String?
  city             String?
  postalCode       String?

  placedAt         DateTime      @default(now())

  shop             Shop          @relation(fields: [shopId], references: [id])
  customer         Profile       @relation(fields: [customerId], references: [id])
  items            OrderItem[]
  payments         Payment[]

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([shopId])
  @@index([customerId])
}

model OrderItem {
  id             String         @id @default(uuid()) @db.Uuid
  orderId        String         @db.Uuid
  productId      String         @db.Uuid
  variantId      String?        @db.Uuid
  qty            Int            @default(1)
  unitPriceCents Int

  order          Order          @relation(fields: [orderId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
  variant        ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model Payment {
  id                String        @id @default(uuid()) @db.Uuid
  orderId           String        @db.Uuid
  provider          String
  providerPaymentId String?
  status            PaymentStatus @default(PENDING)
  amountCents       Int
  createdAt         DateTime      @default(now())

  order             Order         @relation(fields: [orderId], references: [id])

  @@index([orderId])
}